/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cx.consumer.kafkacon.audio;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AudioCommand extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7045416396844590345L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AudioCommand\",\"namespace\":\"com.cx.consumer.kafkacon.audio\",\"fields\":[{\"name\":\"command\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"level\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"Type\",\"symbols\":[\"REGULAR\",\"ADVANCED\"]},\"default\":\"REGULAR\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AudioCommand> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AudioCommand> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AudioCommand> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AudioCommand> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AudioCommand> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AudioCommand to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AudioCommand from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AudioCommand instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AudioCommand fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String command;
  private java.lang.String level;
  private java.lang.String mode;
  private com.cx.consumer.kafkacon.audio.Type type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AudioCommand() {}

  /**
   * All-args constructor.
   * @param command The new value for command
   * @param level The new value for level
   * @param mode The new value for mode
   * @param type The new value for type
   */
  public AudioCommand(java.lang.String command, java.lang.String level, java.lang.String mode, com.cx.consumer.kafkacon.audio.Type type) {
    this.command = command;
    this.level = level;
    this.mode = mode;
    this.type = type;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return command;
    case 1: return level;
    case 2: return mode;
    case 3: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: command = value$ != null ? value$.toString() : null; break;
    case 1: level = value$ != null ? value$.toString() : null; break;
    case 2: mode = value$ != null ? value$.toString() : null; break;
    case 3: type = (com.cx.consumer.kafkacon.audio.Type)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'command' field.
   * @return The value of the 'command' field.
   */
  public java.lang.String getCommand() {
    return command;
  }


  /**
   * Sets the value of the 'command' field.
   * @param value the value to set.
   */
  public void setCommand(java.lang.String value) {
    this.command = value;
  }

  /**
   * Gets the value of the 'level' field.
   * @return The value of the 'level' field.
   */
  public java.lang.String getLevel() {
    return level;
  }


  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(java.lang.String value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'mode' field.
   * @return The value of the 'mode' field.
   */
  public java.lang.String getMode() {
    return mode;
  }


  /**
   * Sets the value of the 'mode' field.
   * @param value the value to set.
   */
  public void setMode(java.lang.String value) {
    this.mode = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.cx.consumer.kafkacon.audio.Type getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.cx.consumer.kafkacon.audio.Type value) {
    this.type = value;
  }

  /**
   * Creates a new AudioCommand RecordBuilder.
   * @return A new AudioCommand RecordBuilder
   */
  public static com.cx.consumer.kafkacon.audio.AudioCommand.Builder newBuilder() {
    return new com.cx.consumer.kafkacon.audio.AudioCommand.Builder();
  }

  /**
   * Creates a new AudioCommand RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AudioCommand RecordBuilder
   */
  public static com.cx.consumer.kafkacon.audio.AudioCommand.Builder newBuilder(com.cx.consumer.kafkacon.audio.AudioCommand.Builder other) {
    if (other == null) {
      return new com.cx.consumer.kafkacon.audio.AudioCommand.Builder();
    } else {
      return new com.cx.consumer.kafkacon.audio.AudioCommand.Builder(other);
    }
  }

  /**
   * Creates a new AudioCommand RecordBuilder by copying an existing AudioCommand instance.
   * @param other The existing instance to copy.
   * @return A new AudioCommand RecordBuilder
   */
  public static com.cx.consumer.kafkacon.audio.AudioCommand.Builder newBuilder(com.cx.consumer.kafkacon.audio.AudioCommand other) {
    if (other == null) {
      return new com.cx.consumer.kafkacon.audio.AudioCommand.Builder();
    } else {
      return new com.cx.consumer.kafkacon.audio.AudioCommand.Builder(other);
    }
  }

  /**
   * RecordBuilder for AudioCommand instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AudioCommand>
    implements org.apache.avro.data.RecordBuilder<AudioCommand> {

    private java.lang.String command;
    private java.lang.String level;
    private java.lang.String mode;
    private com.cx.consumer.kafkacon.audio.Type type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cx.consumer.kafkacon.audio.AudioCommand.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.command)) {
        this.command = data().deepCopy(fields()[0].schema(), other.command);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.level)) {
        this.level = data().deepCopy(fields()[1].schema(), other.level);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mode)) {
        this.mode = data().deepCopy(fields()[2].schema(), other.mode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AudioCommand instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cx.consumer.kafkacon.audio.AudioCommand other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.command)) {
        this.command = data().deepCopy(fields()[0].schema(), other.command);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.level)) {
        this.level = data().deepCopy(fields()[1].schema(), other.level);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mode)) {
        this.mode = data().deepCopy(fields()[2].schema(), other.mode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.type)) {
        this.type = data().deepCopy(fields()[3].schema(), other.type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'command' field.
      * @return The value.
      */
    public java.lang.String getCommand() {
      return command;
    }


    /**
      * Sets the value of the 'command' field.
      * @param value The value of 'command'.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder setCommand(java.lang.String value) {
      validate(fields()[0], value);
      this.command = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'command' field has been set.
      * @return True if the 'command' field has been set, false otherwise.
      */
    public boolean hasCommand() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'command' field.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder clearCommand() {
      command = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'level' field.
      * @return The value.
      */
    public java.lang.String getLevel() {
      return level;
    }


    /**
      * Sets the value of the 'level' field.
      * @param value The value of 'level'.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder setLevel(java.lang.String value) {
      validate(fields()[1], value);
      this.level = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'level' field has been set.
      * @return True if the 'level' field has been set, false otherwise.
      */
    public boolean hasLevel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'level' field.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder clearLevel() {
      level = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mode' field.
      * @return The value.
      */
    public java.lang.String getMode() {
      return mode;
    }


    /**
      * Sets the value of the 'mode' field.
      * @param value The value of 'mode'.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder setMode(java.lang.String value) {
      validate(fields()[2], value);
      this.mode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mode' field has been set.
      * @return True if the 'mode' field has been set, false otherwise.
      */
    public boolean hasMode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mode' field.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder clearMode() {
      mode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.cx.consumer.kafkacon.audio.Type getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder setType(com.cx.consumer.kafkacon.audio.Type value) {
      validate(fields()[3], value);
      this.type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.cx.consumer.kafkacon.audio.AudioCommand.Builder clearType() {
      type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AudioCommand build() {
      try {
        AudioCommand record = new AudioCommand();
        record.command = fieldSetFlags()[0] ? this.command : (java.lang.String) defaultValue(fields()[0]);
        record.level = fieldSetFlags()[1] ? this.level : (java.lang.String) defaultValue(fields()[1]);
        record.mode = fieldSetFlags()[2] ? this.mode : (java.lang.String) defaultValue(fields()[2]);
        record.type = fieldSetFlags()[3] ? this.type : (com.cx.consumer.kafkacon.audio.Type) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AudioCommand>
    WRITER$ = (org.apache.avro.io.DatumWriter<AudioCommand>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AudioCommand>
    READER$ = (org.apache.avro.io.DatumReader<AudioCommand>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.command);

    if (this.level == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.level);
    }

    if (this.mode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mode);
    }

    out.writeEnum(this.type.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.command = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.level = null;
      } else {
        this.level = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mode = null;
      } else {
        this.mode = in.readString();
      }

      this.type = com.cx.consumer.kafkacon.audio.Type.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.command = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.level = null;
          } else {
            this.level = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mode = null;
          } else {
            this.mode = in.readString();
          }
          break;

        case 3:
          this.type = com.cx.consumer.kafkacon.audio.Type.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










